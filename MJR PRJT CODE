{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ee6e4549",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import cv2\n",
    "import time\n",
    "i = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b00e162d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import smtplib\n",
    "\n",
    "EMAIL_ADDRESS = 'lekhaperiwal16@gmail.com'\n",
    "EMAIL_PASSWORD = 'zgqweuvliljnxqlo' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "178b4708",
   "metadata": {},
   "outputs": [],
   "source": [
    "face_detect = cv2.CascadeClassifier('C:\\\\Users\\\\Raghavendra\\\\Desktop\\\\AI_Files\\\\NITP\\\\cascades\\\\haarcascade_frontalface_default.xml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d9125d34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter to start\n",
      "Enter to start\n"
     ]
    }
   ],
   "source": [
    "source = cv2.VideoCapture(0)\n",
    "input_images = []\n",
    "targets = []\n",
    "count = 0\n",
    "for i in range(2):\n",
    "    no_of_images = 0\n",
    "    input(\"Enter to start\")\n",
    "    while 1:\n",
    "        \n",
    "        _, image = source.read(0)\n",
    "        #print(\"Captured image\")\n",
    "        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "        detected_faces = face_detect.detectMultiScale(gray, 1.2, 9)\n",
    "        #print(\"Detected faces\",len(detected_faces))\n",
    "        if len(detected_faces) > 1:\n",
    "            continue\n",
    "        for each_face in detected_faces:\n",
    "            # Each bbox is a rectangle representing\n",
    "            # the bounding box around the detected object\n",
    "            x, y, w, h = each_face\n",
    "            cv2.rectangle(image, (x, y), (x+w, y+h), (0, 0, 255), 3)\n",
    "            # Cropped object\n",
    "            crop = gray[y:y+h, x:x+w]\n",
    "            cropped_image = cv2.resize(crop, (100, 100))\n",
    "            input_images.append(cropped_image)\n",
    "            targets.append(count)\n",
    "            #print(\"Appends done\")\n",
    "            \n",
    "                \n",
    "            no_of_images += 1\n",
    "            cv2.putText(image, \"Image No : \" + str(no_of_images), (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 100, 100), 2)\n",
    "        \n",
    "            cv2.imshow('Verzeo Project', cropped_image)\n",
    "            #cv2.imshow(\"Just Face\", crop)\n",
    "            key = cv2.waitKey(1)\n",
    "            cv2.imshow(\"Face Window\", image)\n",
    "        if no_of_images == 500:\n",
    "                break\n",
    "     \n",
    "    count += 1\n",
    "\n",
    "    cv2.destroyAllWindows()     \n",
    "source.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "508aea94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(input_images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "33377777",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6754277a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[0.56078431, 0.57254902, 0.54509804, ..., 0.74117647,\n",
       "         0.85098039, 0.10980392],\n",
       "        [0.56862745, 0.57647059, 0.6       , ..., 0.73333333,\n",
       "         0.43921569, 0.24313725],\n",
       "        [0.57647059, 0.57647059, 0.56862745, ..., 0.5254902 ,\n",
       "         0.23137255, 0.25490196],\n",
       "        ...,\n",
       "        [0.29019608, 0.2745098 , 0.30196078, ..., 0.08627451,\n",
       "         0.07843137, 0.06666667],\n",
       "        [0.28627451, 0.27058824, 0.2745098 , ..., 0.08627451,\n",
       "         0.07843137, 0.0745098 ],\n",
       "        [0.28627451, 0.25882353, 0.27058824, ..., 0.08627451,\n",
       "         0.08235294, 0.07843137]],\n",
       "\n",
       "       [[0.58823529, 0.59215686, 0.59215686, ..., 0.20392157,\n",
       "         0.21960784, 0.0745098 ],\n",
       "        [0.58823529, 0.58823529, 0.59607843, ..., 0.23137255,\n",
       "         0.24705882, 0.89411765],\n",
       "        [0.59607843, 0.59215686, 0.60392157, ..., 0.21960784,\n",
       "         0.35686275, 0.66666667],\n",
       "        ...,\n",
       "        [0.58431373, 0.37647059, 0.29411765, ..., 0.1372549 ,\n",
       "         0.11764706, 0.1254902 ],\n",
       "        [0.1254902 , 0.2745098 , 0.2627451 , ..., 0.1372549 ,\n",
       "         0.12156863, 0.1254902 ],\n",
       "        [0.34117647, 0.25490196, 0.26666667, ..., 0.13333333,\n",
       "         0.1254902 , 0.1254902 ]],\n",
       "\n",
       "       [[0.56078431, 0.57647059, 0.57647059, ..., 0.31764706,\n",
       "         0.21176471, 0.2       ],\n",
       "        [0.57254902, 0.56862745, 0.59607843, ..., 0.16862745,\n",
       "         0.18823529, 0.18823529],\n",
       "        [0.58039216, 0.64705882, 0.58039216, ..., 0.14901961,\n",
       "         0.18823529, 0.18823529],\n",
       "        ...,\n",
       "        [0.55686275, 0.37254902, 0.42352941, ..., 0.11372549,\n",
       "         0.12941176, 0.14509804],\n",
       "        [0.50196078, 0.39607843, 0.40392157, ..., 0.10980392,\n",
       "         0.11372549, 0.14117647],\n",
       "        [0.42745098, 0.46666667, 0.63137255, ..., 0.10196078,\n",
       "         0.10196078, 0.12941176]],\n",
       "\n",
       "       ...,\n",
       "\n",
       "       [[0.62352941, 0.63137255, 0.63137255, ..., 0.70588235,\n",
       "         0.69803922, 0.68627451],\n",
       "        [0.60784314, 0.61176471, 0.61176471, ..., 0.70980392,\n",
       "         0.69803922, 0.69803922],\n",
       "        [0.59215686, 0.59607843, 0.60784314, ..., 0.6627451 ,\n",
       "         0.69019608, 0.68235294],\n",
       "        ...,\n",
       "        [0.81960784, 0.86666667, 0.85490196, ..., 0.2       ,\n",
       "         0.3372549 , 0.29411765],\n",
       "        [0.8       , 0.81568627, 0.82352941, ..., 0.4       ,\n",
       "         0.42352941, 0.22745098],\n",
       "        [0.80784314, 0.80784314, 0.8       , ..., 0.4627451 ,\n",
       "         0.49803922, 0.25490196]],\n",
       "\n",
       "       [[0.56078431, 0.56862745, 0.57254902, ..., 0.6       ,\n",
       "         0.40392157, 0.63529412],\n",
       "        [0.56862745, 0.57254902, 0.56078431, ..., 0.60784314,\n",
       "         0.35294118, 0.58431373],\n",
       "        [0.56078431, 0.57254902, 0.56862745, ..., 0.39607843,\n",
       "         0.45490196, 0.55686275],\n",
       "        ...,\n",
       "        [0.83137255, 0.82745098, 0.82745098, ..., 0.08235294,\n",
       "         0.03529412, 0.49803922],\n",
       "        [0.92156863, 0.74117647, 0.78431373, ..., 0.05882353,\n",
       "         0.03137255, 0.43921569],\n",
       "        [0.8627451 , 0.70980392, 0.78823529, ..., 0.08235294,\n",
       "         0.06666667, 0.32941176]],\n",
       "\n",
       "       [[0.58039216, 0.58431373, 0.58039216, ..., 0.72156863,\n",
       "         0.68627451, 0.69803922],\n",
       "        [0.57254902, 0.57647059, 0.57254902, ..., 0.64705882,\n",
       "         0.70196078, 0.69411765],\n",
       "        [0.56862745, 0.57254902, 0.57254902, ..., 0.63137255,\n",
       "         0.68235294, 0.70196078],\n",
       "        ...,\n",
       "        [0.90196078, 0.91372549, 0.89803922, ..., 0.36862745,\n",
       "         0.70196078, 0.10980392],\n",
       "        [0.90196078, 0.90196078, 0.9254902 , ..., 0.36862745,\n",
       "         0.82352941, 0.10980392],\n",
       "        [0.83921569, 0.90588235, 0.89411765, ..., 0.3372549 ,\n",
       "         0.86666667, 0.19607843]]])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_images_normalized = np.array(input_images)/255.0\n",
    "input_images_normalized"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "94813cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_images_normalized_reshaped = input_images_normalized.reshape(1000, 100, 100, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6c85f1e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[0.56078431],\n",
       "         [0.57254902],\n",
       "         [0.54509804],\n",
       "         ...,\n",
       "         [0.74117647],\n",
       "         [0.85098039],\n",
       "         [0.10980392]],\n",
       "\n",
       "        [[0.56862745],\n",
       "         [0.57647059],\n",
       "         [0.6       ],\n",
       "         ...,\n",
       "         [0.73333333],\n",
       "         [0.43921569],\n",
       "         [0.24313725]],\n",
       "\n",
       "        [[0.57647059],\n",
       "         [0.57647059],\n",
       "         [0.56862745],\n",
       "         ...,\n",
       "         [0.5254902 ],\n",
       "         [0.23137255],\n",
       "         [0.25490196]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.29019608],\n",
       "         [0.2745098 ],\n",
       "         [0.30196078],\n",
       "         ...,\n",
       "         [0.08627451],\n",
       "         [0.07843137],\n",
       "         [0.06666667]],\n",
       "\n",
       "        [[0.28627451],\n",
       "         [0.27058824],\n",
       "         [0.2745098 ],\n",
       "         ...,\n",
       "         [0.08627451],\n",
       "         [0.07843137],\n",
       "         [0.0745098 ]],\n",
       "\n",
       "        [[0.28627451],\n",
       "         [0.25882353],\n",
       "         [0.27058824],\n",
       "         ...,\n",
       "         [0.08627451],\n",
       "         [0.08235294],\n",
       "         [0.07843137]]],\n",
       "\n",
       "\n",
       "       [[[0.58823529],\n",
       "         [0.59215686],\n",
       "         [0.59215686],\n",
       "         ...,\n",
       "         [0.20392157],\n",
       "         [0.21960784],\n",
       "         [0.0745098 ]],\n",
       "\n",
       "        [[0.58823529],\n",
       "         [0.58823529],\n",
       "         [0.59607843],\n",
       "         ...,\n",
       "         [0.23137255],\n",
       "         [0.24705882],\n",
       "         [0.89411765]],\n",
       "\n",
       "        [[0.59607843],\n",
       "         [0.59215686],\n",
       "         [0.60392157],\n",
       "         ...,\n",
       "         [0.21960784],\n",
       "         [0.35686275],\n",
       "         [0.66666667]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.58431373],\n",
       "         [0.37647059],\n",
       "         [0.29411765],\n",
       "         ...,\n",
       "         [0.1372549 ],\n",
       "         [0.11764706],\n",
       "         [0.1254902 ]],\n",
       "\n",
       "        [[0.1254902 ],\n",
       "         [0.2745098 ],\n",
       "         [0.2627451 ],\n",
       "         ...,\n",
       "         [0.1372549 ],\n",
       "         [0.12156863],\n",
       "         [0.1254902 ]],\n",
       "\n",
       "        [[0.34117647],\n",
       "         [0.25490196],\n",
       "         [0.26666667],\n",
       "         ...,\n",
       "         [0.13333333],\n",
       "         [0.1254902 ],\n",
       "         [0.1254902 ]]],\n",
       "\n",
       "\n",
       "       [[[0.56078431],\n",
       "         [0.57647059],\n",
       "         [0.57647059],\n",
       "         ...,\n",
       "         [0.31764706],\n",
       "         [0.21176471],\n",
       "         [0.2       ]],\n",
       "\n",
       "        [[0.57254902],\n",
       "         [0.56862745],\n",
       "         [0.59607843],\n",
       "         ...,\n",
       "         [0.16862745],\n",
       "         [0.18823529],\n",
       "         [0.18823529]],\n",
       "\n",
       "        [[0.58039216],\n",
       "         [0.64705882],\n",
       "         [0.58039216],\n",
       "         ...,\n",
       "         [0.14901961],\n",
       "         [0.18823529],\n",
       "         [0.18823529]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.55686275],\n",
       "         [0.37254902],\n",
       "         [0.42352941],\n",
       "         ...,\n",
       "         [0.11372549],\n",
       "         [0.12941176],\n",
       "         [0.14509804]],\n",
       "\n",
       "        [[0.50196078],\n",
       "         [0.39607843],\n",
       "         [0.40392157],\n",
       "         ...,\n",
       "         [0.10980392],\n",
       "         [0.11372549],\n",
       "         [0.14117647]],\n",
       "\n",
       "        [[0.42745098],\n",
       "         [0.46666667],\n",
       "         [0.63137255],\n",
       "         ...,\n",
       "         [0.10196078],\n",
       "         [0.10196078],\n",
       "         [0.12941176]]],\n",
       "\n",
       "\n",
       "       ...,\n",
       "\n",
       "\n",
       "       [[[0.62352941],\n",
       "         [0.63137255],\n",
       "         [0.63137255],\n",
       "         ...,\n",
       "         [0.70588235],\n",
       "         [0.69803922],\n",
       "         [0.68627451]],\n",
       "\n",
       "        [[0.60784314],\n",
       "         [0.61176471],\n",
       "         [0.61176471],\n",
       "         ...,\n",
       "         [0.70980392],\n",
       "         [0.69803922],\n",
       "         [0.69803922]],\n",
       "\n",
       "        [[0.59215686],\n",
       "         [0.59607843],\n",
       "         [0.60784314],\n",
       "         ...,\n",
       "         [0.6627451 ],\n",
       "         [0.69019608],\n",
       "         [0.68235294]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.81960784],\n",
       "         [0.86666667],\n",
       "         [0.85490196],\n",
       "         ...,\n",
       "         [0.2       ],\n",
       "         [0.3372549 ],\n",
       "         [0.29411765]],\n",
       "\n",
       "        [[0.8       ],\n",
       "         [0.81568627],\n",
       "         [0.82352941],\n",
       "         ...,\n",
       "         [0.4       ],\n",
       "         [0.42352941],\n",
       "         [0.22745098]],\n",
       "\n",
       "        [[0.80784314],\n",
       "         [0.80784314],\n",
       "         [0.8       ],\n",
       "         ...,\n",
       "         [0.4627451 ],\n",
       "         [0.49803922],\n",
       "         [0.25490196]]],\n",
       "\n",
       "\n",
       "       [[[0.56078431],\n",
       "         [0.56862745],\n",
       "         [0.57254902],\n",
       "         ...,\n",
       "         [0.6       ],\n",
       "         [0.40392157],\n",
       "         [0.63529412]],\n",
       "\n",
       "        [[0.56862745],\n",
       "         [0.57254902],\n",
       "         [0.56078431],\n",
       "         ...,\n",
       "         [0.60784314],\n",
       "         [0.35294118],\n",
       "         [0.58431373]],\n",
       "\n",
       "        [[0.56078431],\n",
       "         [0.57254902],\n",
       "         [0.56862745],\n",
       "         ...,\n",
       "         [0.39607843],\n",
       "         [0.45490196],\n",
       "         [0.55686275]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.83137255],\n",
       "         [0.82745098],\n",
       "         [0.82745098],\n",
       "         ...,\n",
       "         [0.08235294],\n",
       "         [0.03529412],\n",
       "         [0.49803922]],\n",
       "\n",
       "        [[0.92156863],\n",
       "         [0.74117647],\n",
       "         [0.78431373],\n",
       "         ...,\n",
       "         [0.05882353],\n",
       "         [0.03137255],\n",
       "         [0.43921569]],\n",
       "\n",
       "        [[0.8627451 ],\n",
       "         [0.70980392],\n",
       "         [0.78823529],\n",
       "         ...,\n",
       "         [0.08235294],\n",
       "         [0.06666667],\n",
       "         [0.32941176]]],\n",
       "\n",
       "\n",
       "       [[[0.58039216],\n",
       "         [0.58431373],\n",
       "         [0.58039216],\n",
       "         ...,\n",
       "         [0.72156863],\n",
       "         [0.68627451],\n",
       "         [0.69803922]],\n",
       "\n",
       "        [[0.57254902],\n",
       "         [0.57647059],\n",
       "         [0.57254902],\n",
       "         ...,\n",
       "         [0.64705882],\n",
       "         [0.70196078],\n",
       "         [0.69411765]],\n",
       "\n",
       "        [[0.56862745],\n",
       "         [0.57254902],\n",
       "         [0.57254902],\n",
       "         ...,\n",
       "         [0.63137255],\n",
       "         [0.68235294],\n",
       "         [0.70196078]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[0.90196078],\n",
       "         [0.91372549],\n",
       "         [0.89803922],\n",
       "         ...,\n",
       "         [0.36862745],\n",
       "         [0.70196078],\n",
       "         [0.10980392]],\n",
       "\n",
       "        [[0.90196078],\n",
       "         [0.90196078],\n",
       "         [0.9254902 ],\n",
       "         ...,\n",
       "         [0.36862745],\n",
       "         [0.82352941],\n",
       "         [0.10980392]],\n",
       "\n",
       "        [[0.83921569],\n",
       "         [0.90588235],\n",
       "         [0.89411765],\n",
       "         ...,\n",
       "         [0.3372549 ],\n",
       "         [0.86666667],\n",
       "         [0.19607843]]]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "input_images_normalized_reshaped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5d08aaeb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       ...,\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.]], dtype=float32)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.utils import np_utils\n",
    "targets = np_utils.to_categorical(targets)\n",
    "targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2ffc163e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.],\n",
       "       [1., 0.]], dtype=float32)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "targets[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "36c4eaee",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "86b6a6f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = train_test_split(input_images_normalized_reshaped, targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ea353bed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((750, 100, 100, 1), (250, 100, 100, 1), (750, 2), (250, 2))"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_test.shape, Y_train.shape, Y_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6a599596",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Sequential\n",
    "from keras.layers import Dense,Activation,Conv2D,MaxPooling2D,Dropout,Flatten\n",
    "from tensorflow.keras.optimizers import SGD\n",
    "from keras.callbacks import ModelCheckpoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f05cd193",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "model.add(Conv2D(300, (3,3), input_shape=(100,  100, 1)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Conv2D(100, (3,3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "\n",
    "model.add(Dropout(0.3))\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(50, activation='relu'))\n",
    "model.add(Dense(2, activation='softmax'))\n",
    "\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "050db224",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/5\n",
      "19/19 [==============================] - 71s 2s/step - loss: 0.7369 - accuracy: 0.5246 - val_loss: 0.3809 - val_accuracy: 0.9867\n",
      "INFO:tensorflow:Assets written to: best_one\\assets\n",
      "Epoch 2/5\n",
      "19/19 [==============================] - 39s 2s/step - loss: 0.2200 - accuracy: 0.9562 - val_loss: 0.0354 - val_accuracy: 0.9867\n",
      "INFO:tensorflow:Assets written to: best_one\\assets\n",
      "Epoch 3/5\n",
      "19/19 [==============================] - 40s 2s/step - loss: 0.0360 - accuracy: 0.9823 - val_loss: 0.0045 - val_accuracy: 1.0000\n",
      "INFO:tensorflow:Assets written to: best_one\\assets\n",
      "Epoch 4/5\n",
      "19/19 [==============================] - 39s 2s/step - loss: 0.0042 - accuracy: 0.9996 - val_loss: 0.0158 - val_accuracy: 0.9933\n",
      "Epoch 5/5\n",
      "19/19 [==============================] - 39s 2s/step - loss: 0.0055 - accuracy: 1.0000 - val_loss: 0.0026 - val_accuracy: 1.0000\n",
      "INFO:tensorflow:Assets written to: best_one\\assets\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1f22d249910>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cp = ModelCheckpoint('best_one', verbose=0, save_best_only=True)\n",
    "model.fit(X_train, Y_train, epochs = 5, callbacks=[cp], validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "88ff0d6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import load_model\n",
    "model = load_model('best_one')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "defb074f",
   "metadata": {},
   "outputs": [],
   "source": [
    "source = cv2.VideoCapture(0)\n",
    "\n",
    "while 1:        \n",
    "    \n",
    "    _, image = source.read(0)\n",
    "    #print(\"Captured image\")\n",
    "    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    detected_faces = face_detect.detectMultiScale(gray, 1.2, 9)\n",
    "    #print(\"Detected faces\",len(detected_faces))\n",
    "    if len(detected_faces) > 1:\n",
    "        continue\n",
    "    for each_face in detected_faces:\n",
    "        # Each bbox is a rectangle representing\n",
    "        # the bounding box around the detected object\n",
    "        x, y, w, h = each_face\n",
    "        cv2.rectangle(image, (x, y), (x+w, y+h), (0, 0, 255), 3)\n",
    "        # Cropped object\n",
    "        crop = gray[y:y+h, x:x+w]\n",
    "        cropped_image = cv2.resize(crop, (100, 100))\n",
    "        normalized_image = cropped_image/255\n",
    "        reshaped_face = np.reshape(normalized_image, (1, 100, 100, 1))\n",
    "        result = model.predict(reshaped_face)[0]\n",
    "        \n",
    "       \n",
    "        if result[0] >  result[1]:\n",
    "            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)\n",
    "            cv2.putText(image, \"WELCOME BOSS\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)\n",
    "        \n",
    "        if (result[1] >  result[0])  :\n",
    "            cv2.rectangle(image, (x, y), (x + w, y + h), (0, 0, 255), 2)\n",
    "            cv2.putText(image, \"INTRUDER\", (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)\n",
    "            \n",
    "            with smtplib.SMTP('smtp.gmail.com',587) as smtp:\n",
    "                smtp.ehlo()\n",
    "                smtp.starttls()\n",
    "                smtp.ehlo()\n",
    "                smtp.login(EMAIL_ADDRESS,EMAIL_PASSWORD)\n",
    "\n",
    "                subject = 'INTRUDER ALERT'\n",
    "                body = 'Check with cctv! Some intruder at your place!' \n",
    "\n",
    "                msg= f'Subject: {subject} \\n\\n {body}'\n",
    "\n",
    "                smtp.sendmail(EMAIL_ADDRESS,'raghavendramaladkar55@gmail.com',msg)      \n",
    "                    \n",
    "      \n",
    "        \n",
    "    cv2.imshow('Major project', image)\n",
    "    key = cv2.waitKey(1)\n",
    "    if key == 27:\n",
    "        break\n",
    "cv2.destroyAllWindows()\n",
    "source.release()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af1a86a7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbfd5c41",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
